{"version":3,"sources":["Navbar.js","axios.js","requests.js","Banner.js","Row.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","changeColor","window","scrollY","handleShow","useState","show","useEffect","addEventListener","removeEventListener","className","src","alt","instance","axios","create","baseURL","APIKEY","requests","fetchTrending","fetchOriginals","fetchTopRated","fetchActionMovies","fetchCodmedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","Banner","str","n","movie","setMovie","a","get","request","data","results","Math","floor","random","length","fetchData","style","backgroundSize","backgroundImage","backdrop_path","backgroundPosition","title","name","original_name","overview","substr","Row","fetchUrl","isLargeRow","movies","setMovies","trailerUrl","setTrailerUrl","map","onClick","movieTrailer","then","url","urlParams","URLSearchParams","URL","search","catch","err","console","log","handleClick","key","id","poster_path","videoId","opts","height","width","playerVars","autoplay","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.073cd271.chunk.js","sourcesContent":["import React, {useState,useEffect} from 'react'\r\nimport './Navbar.css'\r\n\r\nfunction Navbar() {\r\n    function changeColor(){\r\n        window.scrollY > 100 ? handleShow(true) : handleShow(false)\r\n    }\r\n    const [show, handleShow] = useState(false);\r\n    useEffect(() => {\r\n        window.addEventListener(\"scroll\", changeColor)\r\n\r\n        return () => {\r\n            window.removeEventListener(\"scroll\", changeColor);\r\n        }\r\n    })\r\n    return (\r\n        <div className={`nav ${show && 'nav_black'}`}>\r\n            <img className=\"nav_logo\" src=\"https://upload.wikimedia.org/wikipedia/commons/0/08/Netflix_2015_logo.svg\" alt=\"Netflix Logo\"/>\r\n\r\n            <img className=\"nav_avatar\" src=\"https://pbs.twimg.com/media/DlKNEufWsAAgr2E?format=jpg&name=small\" alt=\"profile icon\"/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Navbar\r\n","import axios from 'axios';\r\n\r\n// base url\r\nconst instance = axios.create({\r\n    baseURL : 'https://api.themoviedb.org/3'\r\n});\r\n\r\nexport default instance;","const APIKEY = \"a8168a090b3fdf04fe78660fbcc4370e\";\r\n\r\nconst requests = {\r\n    fetchTrending: `/trending/all/week?api_key=${APIKEY}&language=en-US`,\r\n    fetchOriginals: `/discover/tv?api_key=${APIKEY}&with_networks=213`,\r\n    fetchTopRated: `/movie/top_rated?api_key=${APIKEY}&language=en-US`,\r\n    fetchActionMovies: `/discover/movie?api_key=${APIKEY}&with_genres=28`,\r\n    fetchCodmedyMovies: `/discover/movie?api_key=${APIKEY}&with_genres=35`,\r\n    fetchHorrorMovies: `/discover/movie?api_key=${APIKEY}&with_genres=27`,\r\n    fetchRomanceMovies: `/discover/movie?api_key=${APIKEY}&with_genres=10749`,\r\n    fetchDocumentaries: `/discover/movie?api_key=${APIKEY}&with_genres=99`,\r\n}\r\n\r\nexport default requests;\r\n\r\n// if exporting using default keyword then you can rename the import to whatever name you want \r\n// else you will have to import with the same name as exported\r\n\r\n// note you can have only one default export in a file\r\n// if you want multiple exports you will have to follow syntax ->\r\n// export const varibleName","import React, { useState, useEffect } from 'react'\r\nimport axios from './axios';\r\nimport requests from './requests';\r\nimport './Banner.css'\r\nconst baseImgUrl = 'https://image.tmdb.org/t/p/original/';\r\n\r\nfunction Banner() {\r\n    const [movie, setMovie] = useState([]);\r\n\r\n    useEffect(() => {\r\n        async function fetchData() {\r\n            const request = await axios.get(requests.fetchOriginals);\r\n            setMovie(request.data.results[\r\n                Math.floor(Math.random() * request.data.results.length - 1)\r\n            ]);\r\n        }\r\n        fetchData();\r\n    }, [])\r\n\r\n    function truncate(str,n) {\r\n        return str?.length > n ? str.substr(0, n-1) + '...' : str;\r\n    }\r\n\r\n\r\n    return (\r\n        <header className=\"banner\"\r\n            style={{\r\n                backgroundSize: 'cover',\r\n                backgroundImage: `url(${baseImgUrl}${movie?.backdrop_path})`,\r\n                backgroundPosition: 'center center'\r\n            }}>\r\n            <div className=\"banner_content\">\r\n                <h1 className=\"banner_title\">{movie?.title || movie?.name || movie?.original_name}</h1>\r\n                <div className=\"banner_buttons\">\r\n                    <button className=\"banner_button\">Play</button>\r\n                    <button className=\"banner_button\">My List</button>\r\n                </div>\r\n                <h1 className=\"banner_desc\">{truncate(movie?.overview, 150)}</h1>\r\n            </div>\r\n            <div className=\"fade_bottom\"></div>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Banner\r\n","import React, { useState, useEffect } from 'react'\r\nimport YouTube from 'react-youtube';\r\nimport axios from './axios';\r\nimport './Row.css'\r\nimport movieTrailer from 'movie-trailer'\r\nconst baseImgUrl = 'https://image.tmdb.org/t/p/original/';\r\n\r\nfunction Row({ title, fetchUrl, isLargeRow }) {\r\n    // useState -> managing state of page until refresh temporary memory\r\n    const [movies, setMovies] = useState([]);\r\n    const [trailerUrl, setTrailerUrl] = useState(\"\");\r\n    // useEffect -> snippet of code which runs on certain conditions\r\n    useEffect(() => {\r\n        // if [], run once when page loads and dont run again\r\n        // if [movies], this code will run everytime movies variable changes\r\n        async function fetchData() {\r\n            const request = await axios.get(fetchUrl);\r\n            setMovies(request.data.results);\r\n            return request;\r\n        }\r\n        fetchData();\r\n    }, [fetchUrl])\r\n    const opts = {\r\n        height: '390',\r\n        width: '100%',\r\n        playerVars: {\r\n            autoplay: 1,\r\n        },\r\n    };\r\n\r\n    const handleClick = (movie) => {\r\n        trailerUrl ? setTrailerUrl('') : movieTrailer((movie?.title || movie?.name || movie?.original_name) || '').then(url => {\r\n            const urlParams = new URLSearchParams(new URL(url).search);\r\n            setTrailerUrl(urlParams.get('v'));\r\n        }).catch(err => console.log(err))\r\n    }\r\n    return (\r\n        <div className=\"row\">\r\n            <h2>{title}</h2>\r\n            <div className=\"row_posters\">\r\n                {movies.map(movie => (\r\n                    <img onClick={() => handleClick(movie)} key={movie.id} className={`row_poster ${isLargeRow && 'row_poster_large'}`} src={`${baseImgUrl}${isLargeRow ? movie.poster_path : movie.backdrop_path}`} alt={movie.name} />\r\n                ))}\r\n            </div>\r\n            {trailerUrl && <YouTube videoId={trailerUrl} opts={opts} />}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Row\r\n","import React from 'react';\nimport './App.css';\nimport Navbar from './Navbar'\nimport Banner from './Banner'\nimport Row from './Row';\nimport requests from './requests';\nfunction App() {\n  return (\n    <div className=\"app\">\n      <Navbar />\n      <Banner />\n      <Row title=\"Netflix Originals\" isLargeRow fetchUrl={requests.fetchOriginals}/>\n      <Row title=\"Trending Now\" fetchUrl = {requests.fetchTrending}/>\n      <Row title=\"Top Rated\" fetchUrl = {requests.fetchTopRated}/>\n      <Row title=\"Action Movies\" fetchUrl = {requests.fetchActionMovies}/>\n      <Row title=\"Comedy Movies\" fetchUrl = {requests.fetchCodmedyMovies}/>\n      <Row title=\"Horror Movies\" fetchUrl = {requests.fetchHorrorMovies}/>\n      <Row title=\"Romance Movies\" fetchUrl = {requests.fetchRomanceMovies}/>\n      <Row title=\"Documentaries\" fetchUrl = {requests.fetchDocumentaries}/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}